# 9.1: Dictionaries

# dictionary initialization: creating an empty dictionary object
person = dict()
# name = age
person['Sajid'] = 21
person['Fareen'] = 20
person['sami'] = 10
# order of storage is unpredictable, pair remains constant
print(person)
# key value mapping, dictionary[key] points to the value
print(person['sami'])

# dictionary contents are mutable
person['sami'] = person['sami'] + 2
print(person['sami'])
print(person)

# dictionary literal (constant): filled {k1: v1, k2: v2}, empty {}
name_age = {'fareen': 21, 'Sami': 14, 'Sajid': 23, 'rabid': 'kochi', 'fabi': -13}
print(name_age)

name_age['fareen'] = name_age['fareen'] + 2
name_age['rabid'] = name_age['rabid'] + '1'
print(name_age)

# empty dictionary literal names
names = {}
names[1] = 'sajid'
names[1.5] = 'Fareen'
names[2] = 'samo'
names[3] = 'faBi'
names[4] = 'rabit'
print(names)

age_dict = {1.5: 24, 2: 12, 3: -13, 4: 'kochi'}
print(age_dict)
print(len(age_dict))

# 9.2: Counting with Dictionaries

# ex 1: histogram of repeating names
name_count = dict()
while True:
    kname = input('Enter name: ')
    if kname == 'q':
        break
    if kname not in name_count:  # new entry
        name_count[kname] = 1  # add a new entry, set count to 1
    elif kname in name_count:  # already existing entry
        name_count[kname] = name_count[kname] + 1  # increment 1 to already existing entry's count
print(name_count)


# ex 1 using .get(key, value) func to simplify counting
name_count2 = {}
while True:
    kname = input('Enter name: ')
    if kname == 'q':
        break
    # line 62 & 63 (combines if-else): shorcut of line 48-51
    val = name_count2.get(kname, 0)  # if kname's entry doesn't exist, add it and set default value 0
    name_count2[kname] = val + 1  # increment kname's count by 1
    #name_count2[kname] = name_count2.get(kname, 0) + 1  # idiom: even shorter (line 48-51)
print(name_count2)


clothes = {'socks': 2, 'pants': 4, 'shirts': 6}
val = clothes.get('shoes', 1)
clothes['shoes'] = val
print(clothes)


# 9.3: Dictionaries and Files

# ex 1: find the most used word, histogram problem
# counting pattern
counts = dict()
fpath = input('Enter file path: ')
fhand = open(fpath)

for line in fhand:
    words = line.split()  # split/break line into a list of words based on spaces
    print('Words:', words)
    for word in words:
        counts[word] = counts.get(word, 0) + 1  # handles new and existing entry
print('Counts', counts)


# using for loop to go through all the keys in a dictionary and look up the corresponding values
# in a dictionary the interation variable always goes through the keys (in list it goes through the values)
name_count = {'chuck': 1, 'fred': 42, 'jan': 100}
for key in name_count:
    print(key, name_count[key])


# retrieving list of keys using list(dict) func
name_count_list = list(name_count)  # list of keys
print(name_count_list)


# keys and values comes out in corresponding orders
# retrieving list of keys using dict.keys()
key_list = name_count.keys()  # list of keys
print(key_list)

# retrieving list of values using dict.values()
value_list = name_count.values()  # list of values
print(value_list)


# dict.items() gives a list of key value pair
item_list = name_count.items()  # list of key-value pairs called tuples
print(item_list)


# printing keys and valus from each tuples generated by dict.items()
# key and val are 2 iteration variables
for key, val in name_count.items():
    print(key, val)
