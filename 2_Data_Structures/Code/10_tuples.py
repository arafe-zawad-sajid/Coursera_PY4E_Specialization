# 10: tuples
# tuple has some similarities with list
name_tuple = ('Glenn', 'Sally', '2', 'Joseph')
print(name_tuple)
print(name_tuple[2])
print('max =', max(name_tuple))

for name in name_tuple:
    print(name)


# tuple has some dissimilarities with list
# lists are mutable, tuples are immutable like strings
# name_tuple[2] = '29'  # TypeError: tuple doesn't support item assignment
name_list = ['hello', 'jake', 'bob']
name_list[2] = 5  # works: lists are mutable
print(name_list)

sname = 'Sajid'
print(sname[2])
# sname[2] = '2'  # TypeError: str doesn't support item assignment

# lots of list functions don't work in tuple
# name_tuple.sort()  # AttributeError
# name_tuple.append('rabida')  # AttributeError
# name_tuple.reverse()  # AttributeError


# directories of tuple is a subset of list, since tuple is immutable
#print(dir(name_tuple))
#print(dir(name_list))


# tuples and assignment: tuple = tuple
(id, name, age) = (4, 'sajid', "23")  # one to one correspondence
print(name)

x, y = 3, 4  # simultaneous assignment
print(y)

# inequal number on both sides causes ValueError
# (x, y) = (1, 2, 3)
# (x, y, z) = (1, 2)

name_count = dict()
name_count['Sajid'] = 2
name_count['Fareen'] = 5
name_count['sami'] = 1

# dict.items() gives a list of tuples
lname_count = name_count.items()
print(lname_count)  # output literally shows a list of tuples

for (k, v) in name_count.items():
    print(k, v)


# comparing tuples like strings (can be used in if statements as conditions)
# one to one correspondence (comparison), returns true on the first true
print((0, 1.4, 2) < (5.0, 1, 2))
print((0, 0, 2) > (0, 0, 2))
print((0, 0, 2) == (0, 0, 2))

print((0, 0, 2, 1.5) < (0, 0, 2))
print((0, 0, 1, 1.5) < (0, 0, 2))
print((0, 0, 1, 1.5) == (0, 0, 2))

print(('Jones', 'Sally') < ('Jones', 'Sam'))


# sorting lists of tuples, based on keys
name_count = {'sajid': 10, 'sami': 8, 'Fareen': 15, 'sajid': 9, 'Sajid': 3}
print(name_count.items())  # does not update name_count, immutable

print(name_count)

print(sorted(name_count.items()))

for k, v in sorted(name_count.items()):  # loop through key order in a sorted list of tuples
    print(k, v)


# sort by values
# 1. create temporary list, tmp
tmp = list()
# 2. iterate through the list of tuples of the dictionary (generated by dict.items())
# append to tmp in value-key order (reverse of key-value order in dict)
for k, v in name_count.items():  # k, v iteration through list of tuples
    tmp.append((v, k))  # append tuples to tmp list in v,k order
print(tmp)
# 3. sorted() will sort based on value (the first element of each tuple)
tmp = sorted(tmp, reverse=True)  # reverse sort
print(tmp)
# tmp.sort(reverse=True)
# print(tmp)


# sort by values using list comprehension
c = {'a': 10, 'b': 1, 'c': 22}
print(sorted([(v, k) for k, v in c.items()]))
print(sorted([(v, k) for k, v in c.items()], reverse=True))
